(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

    let deuce = 'european gigilo';

    var $dshBrd = this;

    $scope.draggable = false;
    $scope.deleteEnabled = false;
    $scope.urlsEnabled = true;
    $scope.areIconsLoaded = false;
    $scope.deleteIcon = 'img/_x.png';
    $scope.lockIcon = 'img/_locked.png';

    updateWidgets();

    function instantiateGridster() {
      var width = this.window.outerWidth;
      var adjustedGridOptions = gridOptions;
      if (width > 500) {
        adjustedGridOptions.columns = 7;
      } else {
        adjustedGridOptions.columns = 3;
      }
      return adjustedGridOptions;
    }

    function checkScreenSize() {
      var start = $window.outerWidth;
      if (start > 500) {
        $dshBrd.screenSize = 'lg';
      } else {
        $dshBrd.screenSize = 'sm';
      }
    }

    function updateToolIconSize() { 
      $scope.toolIconSize = 
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
    }

    updateToolIconSize();

    function updateWidgets() {
      checkScreenSize();
      $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth); 
      apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets = 
            $dshBrd.screenSize == 'lg'
            ? $dshBrd.widgetsLg
            : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
    }

    $dshBrd.saveWidgets = function () {
      checkScreenSize();

      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = $scope.widgets;
      } else {
        $dshBrd.widgetsSm = $scope.widgets;
      }

      console.log('Save: ', $scope.widgets);

      data = [
        $dshBrd.widgetsLg,
        $dshBrd.widgetsSm
      ];

      apiData.updateWidgets(data)
        .success(function (data) {
          console.log("Success!: ", data)
        })
        .error(function (e) {
          console.log(e);
        });
    }

    $scope.createWidget = function () {
      var widgetUrl = $scope.widgetUrl;
      var widgetWeight = $scope.widgetWeight;
      var widgetIcon = $scope.selectedIcon;
      console.log(widgetIcon);

      var defaultIcon = "img/_blank.png";
      // Form validation
      if (!widgetUrl && widgetIcon === defaultIcon) {
        window.alert("Please Enter URL and Select an Icon");
        return;
      } else if (!widgetUrl) {
        window.alert("Please Enter URL");
        return;
      } else if (widgetIcon === defaultIcon) {
        window.alert("Please Select an Icon");
        return;
      }

      $scope.widgetTemplate = '/dashboard/widgetTemplates/link-widget.template.html';
      $scope.getWidgetTemplate = function () {
        return '/dashboard/widgetTemplates/link-widget.template.html';
      };

      function pushNewWidget(size) {
        if (size === 'lg') {
          var len = $dshBrd.widgetsLg.length;
          var columns = 7;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsLg.push(newWidget);
        } else if (size === 'sm') {
          var len = $dshBrd.widgetsSm.length;
          var columns = 3;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsSm.push(newWidget);
        }
      }

      function createNewWidget(len, columns) {
        var newWidget = {
          icon: widgetIcon,
          url: widgetUrl,
          row: Math.floor(len / columns),
          col: (len % columns) + 1
        }
        return newWidget;
      }

      pushNewWidget('lg');
      pushNewWidget('sm');

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }


    $scope.importWidgets = function () {
      var widgetString = angular.fromJson($scope.widgetString);
      $scope.widgets = widgetString;

      checkScreenSize();
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = widgetString;
      } else {
        $dshBrd.widgetsSm = widgetString;
      }

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.deleteWidget = function (widget) {
      console.log("Delete: ", widget);
      $scope.widgets = $scope.widgets.filter(function (element){
        return element.url != widget.url;
      });

      $dshBrd.saveWidgets();
    }

    $scope.toggleDraggable = function () {
      gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteEnabled = false;
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        $scope.lockIcon = 'img/_lockedRed.png';
      } else {
        $scope.lockIcon = 'img/_locked.png';
      }

      if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
    }

    $scope.toggleDelete = function () {
      $scope.deleteEnabled = !$scope.deleteEnabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteIcon = 'img/_xRed.png';
      } else {
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        gridOptions.draggable.enabled = false;
        $scope.lockIcon = 'img/_locked.png';
      }
    }

    function getIcons() {
      apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
          console.log("icons",$dshBrd.icons);
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
    }

    $scope.loadAllIcons = function () {
      var allIcons = [];
      var totalIcons = $dshBrd.allIcons.length - 1;
      $scope.areIconsLoaded = true;
      console.log($dshBrd.allIcons);

      for (var i = 0; i <= totalIcons; i++) {
        var newIco = $dshBrd.allIcons[i]
        allIcons.push(newIco);
      }
      $scope.shownIcons = allIcons;
      console.log('shown: ', $scope.shownIcons);
    }

    $scope.loadSomeIcons = function () {
      for (var i = 0; i <= 24; i++) {
        var newIco = $dshBrd.allIcons[i]
        $scope.shownIcons.push(newIco);
      }
    }

    $scope.gridsterModalOptions = gridsterModalOptions;
    $scope.selectedIcon = "img/_blank.png";

    $scope.selectIcon = function (iconPath) {
      $scope.selectedIcon = iconPath;
    }

    $scope.openMainModal = function (size, parentSelector) {
      gridOptions.draggable.enabled = false;
      $scope.deleteEnabled = false;

      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'mainModal.html',
        controller: 'dashboardCtrl',
        size: 'lg',
        appendTo: parentElem
      });
    };

    $scope.openAuthModal = function (size, parentSelector) {
      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'authModal.html',
        controller: 'authCtrl',
        controllerAs: '$auth',
        appendTo: parentElem,
      });
    };

    $scope.onLogout = function () {
      auth.logout();
      $location.path('dashboard.view');
    }

    $scope.syncWidgets = function () {
      $dshBrd.widgetsLg = $scope.widgets;
      $dshBrd.widgetsSm = $scope.widgets;
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.resetWidgets = function () {
      checkScreenSize();

      apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
    }

    $scope.clearGrid = function () {
      $scope.widgets = [];
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = [];
      } else {
        $dshBrd.widgetsSm = [];
      }
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    var resizeBreaks = {
      'sm' : 500
    };

    function inputScreenSize(width) {
      if (width > 500) {
        return 'lg';
      } else {
        return 'sm';
      }
    }

    function logIt(type) {
      console.log("Type:", type);
    }

    angular.element($window).bind('resize', function () {
      var oldWidth = $dshBrd.currentWidth;
      var oldSize = $dshBrd.lastScreenSize;
      var newWidth = $window.outerWidth;
      var newSize = inputScreenSize(newWidth);

      if (oldSize !== newSize) {
        $location.path('dashboard.view');
      }

      $dshBrd.lastScreenSize = newSize;
    });

    $scope.logIt = function (widget) {
      console.log(widget);
    }

  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        console.log(attrs);
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];
        console.log('loading directive');

        element.bind('scroll', function () {
          console.log('in scroll');
          console.log(raw.scrollTop + raw.offsetHeight);
          console.log(raw.scrollHeight);
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
      // return {
      //   restrict: 'A',
      //   link: function(scope, element, attrs) {
      //     var raw = element[0];

      //     element.bind('scroll', function () {
      //       // var yPosition = raw.scrollTop + raw.offsetHeight;
      //       // if (yPosition > scope.lastYPosition) {
      //         console.log('in scroll');
      //         console.log(raw.scrollTop + raw.offsetHeight);
      //         console.log(raw.scrollHeight);
      //       // }
      //       scope.lastYPosition = yPosition;
      //     });
      //   }
      // };
    };
    };
  });


(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [ 
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      console.log(buttons);

      return buttons;
    }
    return factory;
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

    let deuce = 'european gigilo';

    var $dshBrd = this;

    $scope.draggable = false;
    $scope.deleteEnabled = false;
    $scope.urlsEnabled = true;
    $scope.areIconsLoaded = false;
    $scope.deleteIcon = 'img/_x.png';
    $scope.lockIcon = 'img/_locked.png';

    updateWidgets();

    function instantiateGridster() {
      var width = this.window.outerWidth;
      var adjustedGridOptions = gridOptions;
      if (width > 500) {
        adjustedGridOptions.columns = 7;
      } else {
        adjustedGridOptions.columns = 3;
      }
      return adjustedGridOptions;
    }

    function checkScreenSize() {
      var start = $window.outerWidth;
      if (start > 500) {
        $dshBrd.screenSize = 'lg';
      } else {
        $dshBrd.screenSize = 'sm';
      }
    }

    function updateToolIconSize() { 
      $scope.toolIconSize = 
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
    }

    updateToolIconSize();

    function updateWidgets() {
      checkScreenSize();
      $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth); 
      apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets = 
            $dshBrd.screenSize == 'lg'
            ? $dshBrd.widgetsLg
            : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
    }

    $dshBrd.saveWidgets = function () {
      checkScreenSize();

      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = $scope.widgets;
      } else {
        $dshBrd.widgetsSm = $scope.widgets;
      }

      console.log('Save: ', $scope.widgets);

      data = [
        $dshBrd.widgetsLg,
        $dshBrd.widgetsSm
      ];

      apiData.updateWidgets(data)
        .success(function (data) {
          console.log("Success!: ", data)
        })
        .error(function (e) {
          console.log(e);
        });
    }

    $scope.createWidget = function () {
      var widgetUrl = $scope.widgetUrl;
      var widgetWeight = $scope.widgetWeight;
      var widgetIcon = $scope.selectedIcon;
      console.log(widgetIcon);

      var defaultIcon = "img/_blank.png";
      // Form validation
      if (!widgetUrl && widgetIcon === defaultIcon) {
        window.alert("Please Enter URL and Select an Icon");
        return;
      } else if (!widgetUrl) {
        window.alert("Please Enter URL");
        return;
      } else if (widgetIcon === defaultIcon) {
        window.alert("Please Select an Icon");
        return;
      }

      $scope.widgetTemplate = '/dashboard/widgetTemplates/link-widget.template.html';
      $scope.getWidgetTemplate = function () {
        return '/dashboard/widgetTemplates/link-widget.template.html';
      };

      function pushNewWidget(size) {
        if (size === 'lg') {
          var len = $dshBrd.widgetsLg.length;
          var columns = 7;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsLg.push(newWidget);
        } else if (size === 'sm') {
          var len = $dshBrd.widgetsSm.length;
          var columns = 3;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsSm.push(newWidget);
        }
      }

      function createNewWidget(len, columns) {
        var newWidget = {
          icon: widgetIcon,
          url: widgetUrl,
          row: Math.floor(len / columns),
          col: (len % columns) + 1
        }
        return newWidget;
      }

      pushNewWidget('lg');
      pushNewWidget('sm');

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }


    $scope.importWidgets = function () {
      var widgetString = angular.fromJson($scope.widgetString);
      $scope.widgets = widgetString;

      checkScreenSize();
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = widgetString;
      } else {
        $dshBrd.widgetsSm = widgetString;
      }

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.deleteWidget = function (widget) {
      console.log("Delete: ", widget);
      $scope.widgets = $scope.widgets.filter(function (element){
        return element.url != widget.url;
      });

      $dshBrd.saveWidgets();
    }

    $scope.toggleDraggable = function () {
      gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteEnabled = false;
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        $scope.lockIcon = 'img/_lockedRed.png';
      } else {
        $scope.lockIcon = 'img/_locked.png';
      }

      if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
    }

    $scope.toggleDelete = function () {
      $scope.deleteEnabled = !$scope.deleteEnabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteIcon = 'img/_xRed.png';
      } else {
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        gridOptions.draggable.enabled = false;
        $scope.lockIcon = 'img/_locked.png';
      }
    }

    function getIcons() {
      apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
          console.log("icons",$dshBrd.icons);
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
    }

    $scope.loadAllIcons = function () {
      var allIcons = [];
      var totalIcons = $dshBrd.allIcons.length - 1;
      $scope.areIconsLoaded = true;
      console.log($dshBrd.allIcons);

      for (var i = 0; i <= totalIcons; i++) {
        var newIco = $dshBrd.allIcons[i]
        allIcons.push(newIco);
      }
      $scope.shownIcons = allIcons;
      console.log('shown: ', $scope.shownIcons);
    }

    $scope.loadSomeIcons = function () {
      for (var i = 0; i <= 24; i++) {
        var newIco = $dshBrd.allIcons[i]
        $scope.shownIcons.push(newIco);
      }
    }

    $scope.gridsterModalOptions = gridsterModalOptions;
    $scope.selectedIcon = "img/_blank.png";

    $scope.selectIcon = function (iconPath) {
      $scope.selectedIcon = iconPath;
    }

    $scope.openMainModal = function (size, parentSelector) {
      gridOptions.draggable.enabled = false;
      $scope.deleteEnabled = false;

      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'mainModal.html',
        controller: 'dashboardCtrl',
        size: 'lg',
        appendTo: parentElem
      });
    };

    $scope.openAuthModal = function (size, parentSelector) {
      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'authModal.html',
        controller: 'authCtrl',
        controllerAs: '$auth',
        appendTo: parentElem,
      });
    };

    $scope.onLogout = function () {
      auth.logout();
      $location.path('dashboard.view');
    }

    $scope.syncWidgets = function () {
      $dshBrd.widgetsLg = $scope.widgets;
      $dshBrd.widgetsSm = $scope.widgets;
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.resetWidgets = function () {
      checkScreenSize();

      apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
    }

    $scope.clearGrid = function () {
      $scope.widgets = [];
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = [];
      } else {
        $dshBrd.widgetsSm = [];
      }
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    var resizeBreaks = {
      'sm' : 500
    };

    function inputScreenSize(width) {
      if (width > 500) {
        return 'lg';
      } else {
        return 'sm';
      }
    }

    function logIt(type) {
      console.log("Type:", type);
    }

    angular.element($window).bind('resize', function () {
      var oldWidth = $dshBrd.currentWidth;
      var oldSize = $dshBrd.lastScreenSize;
      var newWidth = $window.outerWidth;
      var newSize = inputScreenSize(newWidth);

      if (oldSize !== newSize) {
        $location.path('dashboard.view');
      }

      $dshBrd.lastScreenSize = newSize;
    });

    $scope.logIt = function (widget) {
      console.log(widget);
    }

  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        console.log(attrs);
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];
        console.log('loading directive');

        element.bind('scroll', function () {
          console.log('in scroll');
          console.log(raw.scrollTop + raw.offsetHeight);
          console.log(raw.scrollHeight);
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
      // return {
      //   restrict: 'A',
      //   link: function(scope, element, attrs) {
      //     var raw = element[0];

      //     element.bind('scroll', function () {
      //       // var yPosition = raw.scrollTop + raw.offsetHeight;
      //       // if (yPosition > scope.lastYPosition) {
      //         console.log('in scroll');
      //         console.log(raw.scrollTop + raw.offsetHeight);
      //         console.log(raw.scrollHeight);
      //       // }
      //       scope.lastYPosition = yPosition;
      //     });
      //   }
      // };
    };
    };
  });


(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [ 
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      console.log(buttons);

      return buttons;
    }
    return factory;
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

    let deuce = 'male gigilo';

    var $dshBrd = this;

    $scope.draggable = false;
    $scope.deleteEnabled = false;
    $scope.urlsEnabled = true;
    $scope.areIconsLoaded = false;
    $scope.deleteIcon = 'img/_x.png';
    $scope.lockIcon = 'img/_locked.png';

    updateWidgets();

    function instantiateGridster() {
      var width = this.window.outerWidth;
      var adjustedGridOptions = gridOptions;
      if (width > 500) {
        adjustedGridOptions.columns = 7;
      } else {
        adjustedGridOptions.columns = 3;
      }
      return adjustedGridOptions;
    }

    function checkScreenSize() {
      var start = $window.outerWidth;
      if (start > 500) {
        $dshBrd.screenSize = 'lg';
      } else {
        $dshBrd.screenSize = 'sm';
      }
    }

    function updateToolIconSize() { 
      $scope.toolIconSize = 
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
    }

    updateToolIconSize();

    function updateWidgets() {
      checkScreenSize();
      $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth); 
      apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets = 
            $dshBrd.screenSize == 'lg'
            ? $dshBrd.widgetsLg
            : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
    }

    $dshBrd.saveWidgets = function () {
      checkScreenSize();

      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = $scope.widgets;
      } else {
        $dshBrd.widgetsSm = $scope.widgets;
      }

      console.log('Save: ', $scope.widgets);

      data = [
        $dshBrd.widgetsLg,
        $dshBrd.widgetsSm
      ];

      apiData.updateWidgets(data)
        .success(function (data) {
          console.log("Success!: ", data)
        })
        .error(function (e) {
          console.log(e);
        });
    }

    $scope.createWidget = function () {
      var widgetUrl = $scope.widgetUrl;
      var widgetWeight = $scope.widgetWeight;
      var widgetIcon = $scope.selectedIcon;
      console.log(widgetIcon);

      var defaultIcon = "img/_blank.png";
      // Form validation
      if (!widgetUrl && widgetIcon === defaultIcon) {
        window.alert("Please Enter URL and Select an Icon");
        return;
      } else if (!widgetUrl) {
        window.alert("Please Enter URL");
        return;
      } else if (widgetIcon === defaultIcon) {
        window.alert("Please Select an Icon");
        return;
      }

      $scope.widgetTemplate = '/dashboard/widgetTemplates/link-widget.template.html';
      $scope.getWidgetTemplate = function () {
        return '/dashboard/widgetTemplates/link-widget.template.html';
      };

      function pushNewWidget(size) {
        if (size === 'lg') {
          var len = $dshBrd.widgetsLg.length;
          var columns = 7;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsLg.push(newWidget);
        } else if (size === 'sm') {
          var len = $dshBrd.widgetsSm.length;
          var columns = 3;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsSm.push(newWidget);
        }
      }

      function createNewWidget(len, columns) {
        var newWidget = {
          icon: widgetIcon,
          url: widgetUrl,
          row: Math.floor(len / columns),
          col: (len % columns) + 1
        }
        return newWidget;
      }

      pushNewWidget('lg');
      pushNewWidget('sm');

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }


    $scope.importWidgets = function () {
      var widgetString = angular.fromJson($scope.widgetString);
      $scope.widgets = widgetString;

      checkScreenSize();
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = widgetString;
      } else {
        $dshBrd.widgetsSm = widgetString;
      }

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.deleteWidget = function (widget) {
      console.log("Delete: ", widget);
      $scope.widgets = $scope.widgets.filter(function (element){
        return element.url != widget.url;
      });

      $dshBrd.saveWidgets();
    }

    $scope.toggleDraggable = function () {
      gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteEnabled = false;
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        $scope.lockIcon = 'img/_lockedRed.png';
      } else {
        $scope.lockIcon = 'img/_locked.png';
      }

      if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
    }

    $scope.toggleDelete = function () {
      $scope.deleteEnabled = !$scope.deleteEnabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteIcon = 'img/_xRed.png';
      } else {
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        gridOptions.draggable.enabled = false;
        $scope.lockIcon = 'img/_locked.png';
      }
    }

    function getIcons() {
      apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
          console.log("icons",$dshBrd.icons);
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
    }

    $scope.loadAllIcons = function () {
      var allIcons = [];
      var totalIcons = $dshBrd.allIcons.length - 1;
      $scope.areIconsLoaded = true;
      console.log($dshBrd.allIcons);

      for (var i = 0; i <= totalIcons; i++) {
        var newIco = $dshBrd.allIcons[i]
        allIcons.push(newIco);
      }
      $scope.shownIcons = allIcons;
      console.log('shown: ', $scope.shownIcons);
    }

    $scope.loadSomeIcons = function () {
      for (var i = 0; i <= 24; i++) {
        var newIco = $dshBrd.allIcons[i]
        $scope.shownIcons.push(newIco);
      }
    }

    $scope.gridsterModalOptions = gridsterModalOptions;
    $scope.selectedIcon = "img/_blank.png";

    $scope.selectIcon = function (iconPath) {
      $scope.selectedIcon = iconPath;
    }

    $scope.openMainModal = function (size, parentSelector) {
      gridOptions.draggable.enabled = false;
      $scope.deleteEnabled = false;

      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'mainModal.html',
        controller: 'dashboardCtrl',
        size: 'lg',
        appendTo: parentElem
      });
    };

    $scope.openAuthModal = function (size, parentSelector) {
      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'authModal.html',
        controller: 'authCtrl',
        controllerAs: '$auth',
        appendTo: parentElem,
      });
    };

    $scope.onLogout = function () {
      auth.logout();
      $location.path('dashboard.view');
    }

    $scope.syncWidgets = function () {
      $dshBrd.widgetsLg = $scope.widgets;
      $dshBrd.widgetsSm = $scope.widgets;
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.resetWidgets = function () {
      checkScreenSize();

      apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
    }

    $scope.clearGrid = function () {
      $scope.widgets = [];
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = [];
      } else {
        $dshBrd.widgetsSm = [];
      }
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    var resizeBreaks = {
      'sm' : 500
    };

    function inputScreenSize(width) {
      if (width > 500) {
        return 'lg';
      } else {
        return 'sm';
      }
    }

    function logIt(type) {
      console.log("Type:", type);
    }

    angular.element($window).bind('resize', function () {
      var oldWidth = $dshBrd.currentWidth;
      var oldSize = $dshBrd.lastScreenSize;
      var newWidth = $window.outerWidth;
      var newSize = inputScreenSize(newWidth);

      if (oldSize !== newSize) {
        $location.path('dashboard.view');
      }

      $dshBrd.lastScreenSize = newSize;
    });

    $scope.logIt = function (widget) {
      console.log(widget);
    }

  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        console.log(attrs);
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];
        console.log('loading directive');

        element.bind('scroll', function () {
          console.log('in scroll');
          console.log(raw.scrollTop + raw.offsetHeight);
          console.log(raw.scrollHeight);
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
      // return {
      //   restrict: 'A',
      //   link: function(scope, element, attrs) {
      //     var raw = element[0];

      //     element.bind('scroll', function () {
      //       // var yPosition = raw.scrollTop + raw.offsetHeight;
      //       // if (yPosition > scope.lastYPosition) {
      //         console.log('in scroll');
      //         console.log(raw.scrollTop + raw.offsetHeight);
      //         console.log(raw.scrollHeight);
      //       // }
      //       scope.lastYPosition = yPosition;
      //     });
      //   }
      // };
    };
    };
  });


(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [ 
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      console.log(buttons);

      return buttons;
    }
    return factory;
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

    let deuce = 'male gigilo';

    var $dshBrd = this;

    $scope.draggable = false;
    $scope.deleteEnabled = false;
    $scope.urlsEnabled = true;
    $scope.areIconsLoaded = false;
    $scope.deleteIcon = 'img/_x.png';
    $scope.lockIcon = 'img/_locked.png';

    updateWidgets();

    function instantiateGridster() {
      var width = this.window.outerWidth;
      var adjustedGridOptions = gridOptions;
      if (width > 500) {
        adjustedGridOptions.columns = 7;
      } else {
        adjustedGridOptions.columns = 3;
      }
      return adjustedGridOptions;
    }

    function checkScreenSize() {
      var start = $window.outerWidth;
      if (start > 500) {
        $dshBrd.screenSize = 'lg';
      } else {
        $dshBrd.screenSize = 'sm';
      }
    }

    function updateToolIconSize() { 
      $scope.toolIconSize = 
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
    }

    updateToolIconSize();

    function updateWidgets() {
      checkScreenSize();
      $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth); 
      apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets = 
            $dshBrd.screenSize == 'lg'
            ? $dshBrd.widgetsLg
            : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
    }

    $dshBrd.saveWidgets = function () {
      checkScreenSize();

      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = $scope.widgets;
      } else {
        $dshBrd.widgetsSm = $scope.widgets;
      }

      console.log('Save: ', $scope.widgets);

      data = [
        $dshBrd.widgetsLg,
        $dshBrd.widgetsSm
      ];

      apiData.updateWidgets(data)
        .success(function (data) {
          console.log("Success!: ", data)
        })
        .error(function (e) {
          console.log(e);
        });
    }

    $scope.createWidget = function () {
      var widgetUrl = $scope.widgetUrl;
      var widgetWeight = $scope.widgetWeight;
      var widgetIcon = $scope.selectedIcon;
      console.log(widgetIcon);

      var defaultIcon = "img/_blank.png";
      // Form validation
      if (!widgetUrl && widgetIcon === defaultIcon) {
        window.alert("Please Enter URL and Select an Icon");
        return;
      } else if (!widgetUrl) {
        window.alert("Please Enter URL");
        return;
      } else if (widgetIcon === defaultIcon) {
        window.alert("Please Select an Icon");
        return;
      }

      $scope.widgetTemplate = '/dashboard/widgetTemplates/link-widget.template.html';
      $scope.getWidgetTemplate = function () {
        return '/dashboard/widgetTemplates/link-widget.template.html';
      };

      function pushNewWidget(size) {
        if (size === 'lg') {
          var len = $dshBrd.widgetsLg.length;
          var columns = 7;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsLg.push(newWidget);
        } else if (size === 'sm') {
          var len = $dshBrd.widgetsSm.length;
          var columns = 3;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsSm.push(newWidget);
        }
      }

      function createNewWidget(len, columns) {
        var newWidget = {
          icon: widgetIcon,
          url: widgetUrl,
          row: Math.floor(len / columns),
          col: (len % columns) + 1
        }
        return newWidget;
      }

      pushNewWidget('lg');
      pushNewWidget('sm');

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }


    $scope.importWidgets = function () {
      var widgetString = angular.fromJson($scope.widgetString);
      $scope.widgets = widgetString;

      checkScreenSize();
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = widgetString;
      } else {
        $dshBrd.widgetsSm = widgetString;
      }

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.deleteWidget = function (widget) {
      console.log("Delete: ", widget);
      $scope.widgets = $scope.widgets.filter(function (element){
        return element.url != widget.url;
      });

      $dshBrd.saveWidgets();
    }

    $scope.toggleDraggable = function () {
      gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteEnabled = false;
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        $scope.lockIcon = 'img/_lockedRed.png';
      } else {
        $scope.lockIcon = 'img/_locked.png';
      }

      if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
    }

    $scope.toggleDelete = function () {
      $scope.deleteEnabled = !$scope.deleteEnabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteIcon = 'img/_xRed.png';
      } else {
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        gridOptions.draggable.enabled = false;
        $scope.lockIcon = 'img/_locked.png';
      }
    }

    function getIcons() {
      apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
          console.log("icons",$dshBrd.icons);
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
    }

    $scope.loadAllIcons = function () {
      var allIcons = [];
      var totalIcons = $dshBrd.allIcons.length - 1;
      $scope.areIconsLoaded = true;
      console.log($dshBrd.allIcons);

      for (var i = 0; i <= totalIcons; i++) {
        var newIco = $dshBrd.allIcons[i]
        allIcons.push(newIco);
      }
      $scope.shownIcons = allIcons;
      console.log('shown: ', $scope.shownIcons);
    }

    $scope.loadSomeIcons = function () {
      for (var i = 0; i <= 24; i++) {
        var newIco = $dshBrd.allIcons[i]
        $scope.shownIcons.push(newIco);
      }
    }

    $scope.gridsterModalOptions = gridsterModalOptions;
    $scope.selectedIcon = "img/_blank.png";

    $scope.selectIcon = function (iconPath) {
      $scope.selectedIcon = iconPath;
    }

    $scope.openMainModal = function (size, parentSelector) {
      gridOptions.draggable.enabled = false;
      $scope.deleteEnabled = false;

      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'mainModal.html',
        controller: 'dashboardCtrl',
        size: 'lg',
        appendTo: parentElem
      });
    };

    $scope.openAuthModal = function (size, parentSelector) {
      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'authModal.html',
        controller: 'authCtrl',
        controllerAs: '$auth',
        appendTo: parentElem,
      });
    };

    $scope.onLogout = function () {
      auth.logout();
      $location.path('dashboard.view');
    }

    $scope.syncWidgets = function () {
      $dshBrd.widgetsLg = $scope.widgets;
      $dshBrd.widgetsSm = $scope.widgets;
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.resetWidgets = function () {
      checkScreenSize();

      apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
    }

    $scope.clearGrid = function () {
      $scope.widgets = [];
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = [];
      } else {
        $dshBrd.widgetsSm = [];
      }
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    var resizeBreaks = {
      'sm' : 500
    };

    function inputScreenSize(width) {
      if (width > 500) {
        return 'lg';
      } else {
        return 'sm';
      }
    }

    function logIt(type) {
      console.log("Type:", type);
    }

    angular.element($window).bind('resize', function () {
      var oldWidth = $dshBrd.currentWidth;
      var oldSize = $dshBrd.lastScreenSize;
      var newWidth = $window.outerWidth;
      var newSize = inputScreenSize(newWidth);

      if (oldSize !== newSize) {
        $location.path('dashboard.view');
      }

      $dshBrd.lastScreenSize = newSize;
    });

    $scope.logIt = function (widget) {
      console.log(widget);
    }

  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        console.log(attrs);
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];
        console.log('loading directive');

        element.bind('scroll', function () {
          console.log('in scroll');
          console.log(raw.scrollTop + raw.offsetHeight);
          console.log(raw.scrollHeight);
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
      // return {
      //   restrict: 'A',
      //   link: function(scope, element, attrs) {
      //     var raw = element[0];

      //     element.bind('scroll', function () {
      //       // var yPosition = raw.scrollTop + raw.offsetHeight;
      //       // if (yPosition > scope.lastYPosition) {
      //         console.log('in scroll');
      //         console.log(raw.scrollTop + raw.offsetHeight);
      //         console.log(raw.scrollHeight);
      //       // }
      //       scope.lastYPosition = yPosition;
      //     });
      //   }
      // };
    };
    };
  });


(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [ 
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      console.log(buttons);

      return buttons;
    }
    return factory;
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

    var $dshBrd = this;

    $scope.draggable = false;
    $scope.deleteEnabled = false;
    $scope.urlsEnabled = true;
    $scope.areIconsLoaded = false;
    $scope.deleteIcon = 'img/_x.png';
    $scope.lockIcon = 'img/_locked.png';

    updateWidgets();

    function instantiateGridster() {
      var width = this.window.outerWidth;
      var adjustedGridOptions = gridOptions;
      if (width > 500) {
        adjustedGridOptions.columns = 7;
      } else {
        adjustedGridOptions.columns = 3;
      }
      return adjustedGridOptions;
    }

    function checkScreenSize() {
      var start = $window.outerWidth;
      if (start > 500) {
        $dshBrd.screenSize = 'lg';
      } else {
        $dshBrd.screenSize = 'sm';
      }
    }

    function updateToolIconSize() { 
      $scope.toolIconSize = 
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
    }

    updateToolIconSize();

    function updateWidgets() {
      checkScreenSize();
      $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth); 
      apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets = 
            $dshBrd.screenSize == 'lg'
            ? $dshBrd.widgetsLg
            : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
    }

    $dshBrd.saveWidgets = function () {
      checkScreenSize();

      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = $scope.widgets;
      } else {
        $dshBrd.widgetsSm = $scope.widgets;
      }

      console.log('Save: ', $scope.widgets);

      data = [
        $dshBrd.widgetsLg,
        $dshBrd.widgetsSm
      ];

      apiData.updateWidgets(data)
        .success(function (data) {
          console.log("Success!: ", data)
        })
        .error(function (e) {
          console.log(e);
        });
    }

    $scope.createWidget = function () {
      var widgetUrl = $scope.widgetUrl;
      var widgetWeight = $scope.widgetWeight;
      var widgetIcon = $scope.selectedIcon;
      console.log(widgetIcon);

      var defaultIcon = "img/_blank.png";
      // Form validation
      if (!widgetUrl && widgetIcon === defaultIcon) {
        window.alert("Please Enter URL and Select an Icon");
        return;
      } else if (!widgetUrl) {
        window.alert("Please Enter URL");
        return;
      } else if (widgetIcon === defaultIcon) {
        window.alert("Please Select an Icon");
        return;
      }

      $scope.widgetTemplate = '/dashboard/widgetTemplates/link-widget.template.html';
      $scope.getWidgetTemplate = function () {
        return '/dashboard/widgetTemplates/link-widget.template.html';
      };

      function pushNewWidget(size) {
        if (size === 'lg') {
          var len = $dshBrd.widgetsLg.length;
          var columns = 7;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsLg.push(newWidget);
        } else if (size === 'sm') {
          var len = $dshBrd.widgetsSm.length;
          var columns = 3;
          var newWidget = createNewWidget(len, columns);
          $dshBrd.widgetsSm.push(newWidget);
        }
      }

      function createNewWidget(len, columns) {
        var newWidget = {
          icon: widgetIcon,
          url: widgetUrl,
          row: Math.floor(len / columns),
          col: (len % columns) + 1
        }
        return newWidget;
      }

      pushNewWidget('lg');
      pushNewWidget('sm');

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }


    $scope.importWidgets = function () {
      var widgetString = angular.fromJson($scope.widgetString);
      $scope.widgets = widgetString;

      checkScreenSize();
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = widgetString;
      } else {
        $dshBrd.widgetsSm = widgetString;
      }

      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.deleteWidget = function (widget) {
      console.log("Delete: ", widget);
      $scope.widgets = $scope.widgets.filter(function (element){
        return element.url != widget.url;
      });

      $dshBrd.saveWidgets();
    }

    $scope.toggleDraggable = function () {
      gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteEnabled = false;
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        $scope.lockIcon = 'img/_lockedRed.png';
      } else {
        $scope.lockIcon = 'img/_locked.png';
      }

      if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
    }

    $scope.toggleDelete = function () {
      $scope.deleteEnabled = !$scope.deleteEnabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;

      if ($scope.deleteEnabled) {
        $scope.deleteIcon = 'img/_xRed.png';
      } else {
        $scope.deleteIcon = 'img/_x.png';
      }

      if (gridOptions.draggable.enabled) {
        gridOptions.draggable.enabled = false;
        $scope.lockIcon = 'img/_locked.png';
      }
    }

    function getIcons() {
      apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
          console.log("icons",$dshBrd.icons);
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
    }

    $scope.loadAllIcons = function () {
      var allIcons = [];
      var totalIcons = $dshBrd.allIcons.length - 1;
      $scope.areIconsLoaded = true;
      console.log($dshBrd.allIcons);

      for (var i = 0; i <= totalIcons; i++) {
        var newIco = $dshBrd.allIcons[i]
        allIcons.push(newIco);
      }
      $scope.shownIcons = allIcons;
      console.log('shown: ', $scope.shownIcons);
    }

    $scope.loadSomeIcons = function () {
      for (var i = 0; i <= 24; i++) {
        var newIco = $dshBrd.allIcons[i]
        $scope.shownIcons.push(newIco);
      }
    }

    $scope.gridsterModalOptions = gridsterModalOptions;
    $scope.selectedIcon = "img/_blank.png";

    $scope.selectIcon = function (iconPath) {
      $scope.selectedIcon = iconPath;
    }

    $scope.openMainModal = function (size, parentSelector) {
      gridOptions.draggable.enabled = false;
      $scope.deleteEnabled = false;

      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'mainModal.html',
        controller: 'dashboardCtrl',
        size: 'lg',
        appendTo: parentElem
      });
    };

    $scope.openAuthModal = function (size, parentSelector) {
      var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'authModal.html',
        controller: 'authCtrl',
        controllerAs: '$auth',
        appendTo: parentElem,
      });
    };

    $scope.onLogout = function () {
      auth.logout();
      $location.path('dashboard.view');
    }

    $scope.syncWidgets = function () {
      $dshBrd.widgetsLg = $scope.widgets;
      $dshBrd.widgetsSm = $scope.widgets;
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.resetWidgets = function () {
      checkScreenSize();

      apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
    }

    $scope.clearGrid = function () {
      $scope.widgets = [];
      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = [];
      } else {
        $dshBrd.widgetsSm = [];
      }
      $dshBrd.saveWidgets();
      $location.path('dashboard.view');
    }

    var resizeBreaks = {
      'sm' : 500
    };

    function inputScreenSize(width) {
      if (width > 500) {
        return 'lg';
      } else {
        return 'sm';
      }
    }

    function logIt(type) {
      console.log("Type:", type);
    }

    angular.element($window).bind('resize', function () {
      var oldWidth = $dshBrd.currentWidth;
      var oldSize = $dshBrd.lastScreenSize;
      var newWidth = $window.outerWidth;
      var newSize = inputScreenSize(newWidth);

      if (oldSize !== newSize) {
        $location.path('dashboard.view');
      }

      $dshBrd.lastScreenSize = newSize;
    });

    $scope.logIt = function (widget) {
      console.log(widget);
    }

  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        console.log(attrs);
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];
        console.log('loading directive');

        element.bind('scroll', function () {
          console.log('in scroll');
          console.log(raw.scrollTop + raw.offsetHeight);
          console.log(raw.scrollHeight);
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
      // return {
      //   restrict: 'A',
      //   link: function(scope, element, attrs) {
      //     var raw = element[0];

      //     element.bind('scroll', function () {
      //       // var yPosition = raw.scrollTop + raw.offsetHeight;
      //       // if (yPosition > scope.lastYPosition) {
      //         console.log('in scroll');
      //         console.log(raw.scrollTop + raw.offsetHeight);
      //         console.log(raw.scrollHeight);
      //       // }
      //       scope.lastYPosition = yPosition;
      //     });
      //   }
      // };
    };
    };
  });


(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [ 
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      console.log(buttons);

      return buttons;
    }
    return factory;
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

    var $dshBrd = this;

    $scope.draggable = false;
    $scope.deleteEnabled = false;
    $scope.urlsEnabled = true;
    $scope.areIconsLoaded = false;
    $scope.deleteIcon = 'img/_x.png';
    $scope.lockIcon = 'img/_locked.png';

    updateWidgets();

    function instantiateGridster() {
      var width = this.window.outerWidth;
      var adjustedGridOptions = gridOptions;
      if (width > 500) {
        adjustedGridOptions.columns = 7;
      } else {
        adjustedGridOptions.columns = 3;
      }
      return adjustedGridOptions;
    }

    function checkScreenSize() {
      var start = $window.outerWidth;
      if (start > 500) {
        $dshBrd.screenSize = 'lg';
      } else {
        $dshBrd.screenSize = 'sm';
      }
    }

    function updateToolIconSize() { 
      $scope.toolIconSize = 
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
    }

    updateToolIconSize();

    function updateWidgets() {
      checkScreenSize();
      $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth); 
      apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets = 
            $dshBrd.screenSize == 'lg'
            ? $dshBrd.widgetsLg
            : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
    }

    $dshBrd.saveWidgets = function () {
      checkScreenSize();

      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = $scope.widgets;
      } else {
        $dshBrd.widgetsSm = $scope.widgets;
      }

      console.log('Save: ', $scope.widgets);

      data = [
        $dshBrd.widgetsLg,
        $dshBrd.widgetsSm
      ];

      apiData.updateWidgets(data)
        .success(function (data) {
          console.log("Success!: ", data)
        })
        .error(function (e) {
          console.log(e);
        });
    }

  $scope.createWidget = function () {
    var widgetUrl = $scope.widgetUrl;
    var widgetWeight = $scope.widgetWeight;
    var widgetIcon = $scope.selectedIcon;
    console.log(widgetIcon);

    var defaultIcon = "img/_blank.png";
    // Form validation
    if (!widgetUrl && widgetIcon === defaultIcon) {
      window.alert("Please Enter URL and Select an Icon");
      return;
    } else if (!widgetUrl) {
      window.alert("Please Enter URL");
      return;
    } else if (widgetIcon === defaultIcon) {
      window.alert("Please Select an Icon");
      return;
    }

    function pushNewWidget(size) {
      if (size === 'lg') {
        var len = $dshBrd.widgetsLg.length;
        var columns = 7;
        var newWidget = createNewWidget(len, columns);
        $dshBrd.widgetsLg.push(newWidget);
      } else if (size === 'sm') {
        var len = $dshBrd.widgetsSm.length;
        var columns = 3;
        var newWidget = createNewWidget(len, columns);
        $dshBrd.widgetsSm.push(newWidget);
      }
    }

    function createNewWidget(len, columns) {
      var newWidget = {
        icon: widgetIcon,
        url: widgetUrl,
        row: Math.floor(len / columns),
        col: (len % columns) + 1
      }
      return newWidget;
    }

    pushNewWidget('lg');
    pushNewWidget('sm');

    $dshBrd.saveWidgets();
    $location.path('dashboard.view');
  }

  $scope.importWidgets = function () {
    var widgetString = angular.fromJson($scope.widgetString);
    $scope.widgets = widgetString;

    checkScreenSize();
    if ($dshBrd.screenSize == 'lg') {
      $dshBrd.widgetsLg = widgetString;
    } else {
      $dshBrd.widgetsSm = widgetString;
    }

    $dshBrd.saveWidgets();
    $location.path('dashboard.view');
  }

  $scope.deleteWidget = function (widget) {
    console.log("Delete: ", widget);
    $scope.widgets = $scope.widgets.filter(function (element){
      return element.url != widget.url;
    });

    $dshBrd.saveWidgets();
  }

  $scope.toggleDraggable = function () {
    gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
    $scope.urlsEnabled = !$scope.urlsEnabled;

    if ($scope.deleteEnabled) {
      $scope.deleteEnabled = false;
      $scope.deleteIcon = 'img/_x.png';
    }

    if (gridOptions.draggable.enabled) {
      $scope.lockIcon = 'img/_lockedRed.png';
    } else {
      $scope.lockIcon = 'img/_locked.png';
    }

    if (!gridOptions.draggable.enabled)
      $dshBrd.saveWidgets();
  }

  $scope.toggleDelete = function () {
    $scope.deleteEnabled = !$scope.deleteEnabled;
    $scope.urlsEnabled = !$scope.urlsEnabled;

    if ($scope.deleteEnabled) {
      $scope.deleteIcon = 'img/_xRed.png';
    } else {
      $scope.deleteIcon = 'img/_x.png';
    }

    if (gridOptions.draggable.enabled) {
      gridOptions.draggable.enabled = false;
      $scope.lockIcon = 'img/_locked.png';
    }
  }

  function getIcons() {
    apiData.getIcons()
      .success(function (icons) {
        $dshBrd.icons = icons;
        console.log("icons",$dshBrd.icons);
      })
      .finally(function () {
        $dshBrd.allIcons = [];
        var len = $dshBrd.icons.length;

        for (i = 0; i < len; i++) {
          var iconObj = {};
          var iconString = 'img/ico/' + $dshBrd.icons[i];
          iconObj.path = iconString;
          $dshBrd.allIcons.push(iconObj);
        }
        $scope.shownIcons = [];
        $scope.loadSomeIcons();
      });
  }

  $scope.loadAllIcons = function () {
    var allIcons = [];
    var totalIcons = $dshBrd.allIcons.length - 1;
    $scope.areIconsLoaded = true;
    console.log($dshBrd.allIcons);

    for (var i = 0; i <= totalIcons; i++) {
      var newIco = $dshBrd.allIcons[i]
      allIcons.push(newIco);
    }
    $scope.shownIcons = allIcons;
    console.log('shown: ', $scope.shownIcons);
  }

  $scope.loadSomeIcons = function () {
    for (var i = 0; i <= 24; i++) {
      var newIco = $dshBrd.allIcons[i]
      $scope.shownIcons.push(newIco);
    }
  }

  $scope.gridsterModalOptions = gridsterModalOptions;
  $scope.selectedIcon = "img/_blank.png";

  $scope.selectIcon = function (iconPath) {
    $scope.selectedIcon = iconPath;
  }

  $scope.openMainModal = function (size, parentSelector) {
    gridOptions.draggable.enabled = false;
    $scope.deleteEnabled = false;

    var parentElem = parentSelector ?
      angular.element($document[0].querySelector('.modal-demo')) : undefined;

    var modalInstance = $uibModal.open({
      templateUrl: 'mainModal.html',
      controller: 'dashboardCtrl',
      size: 'lg',
      appendTo: parentElem
    });
  };

  $scope.openAuthModal = function (size, parentSelector) {
    var parentElem = parentSelector ?
      angular.element($document[0].querySelector('.main-modal')) : undefined;

    var modalInstance = $uibModal.open({
      templateUrl: 'authModal.html',
      controller: 'authCtrl',
      controllerAs: '$auth',
      appendTo: parentElem,
    });
  };

  $scope.onLogout = function () {
    auth.logout();
    $location.path('dashboard.view');
  }

  $scope.syncWidgets = function () {
    $dshBrd.widgetsLg = $scope.widgets;
    $dshBrd.widgetsSm = $scope.widgets;
    $dshBrd.saveWidgets();
    $location.path('dashboard.view');
  }

  $scope.resetWidgets = function () {
    checkScreenSize();

    apiData.getDefaultGrid()
      .success(function (defaultGrid) {
        defaultGrid = angular.fromJson(defaultGrid);
        $scope.widgets = defaultGrid;
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = defaultGrid;
        } else {
          $dshBrd.widgetsSm = defaultGrid;
        }
      })
      .error(function (e) {
        console.log(e);
      })
      .finally(function () {
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      });
  }

  $scope.clearGrid = function () {
    $scope.widgets = [];
    if ($dshBrd.screenSize == 'lg') {
      $dshBrd.widgetsLg = [];
    } else {
      $dshBrd.widgetsSm = [];
    }
    $dshBrd.saveWidgets();
    $location.path('dashboard.view');
  }

  var resizeBreaks = {
    'sm' : 500
  };

  function inputScreenSize(width) {
    if (width > 500) {
      return 'lg';
    } else {
      return 'sm';
    }
  }

  function logIt(type) {
    console.log("Type:", type);
  }

  angular.element($window).bind('resize', function () {
    var oldWidth = $dshBrd.currentWidth;
    var oldSize = $dshBrd.lastScreenSize;
    var newWidth = $window.outerWidth;
    var newSize = inputScreenSize(newWidth);

    if (oldSize !== newSize) {
      $location.path('dashboard.view');
    }

    $dshBrd.lastScreenSize = newSize;
  });

  $scope.logIt = function (widget) {
    console.log(widget);
  }

};
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        console.log(attrs);
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];
        console.log('loading directive');

        element.bind('scroll', function () {
          console.log('in scroll');
          console.log(raw.scrollTop + raw.offsetHeight);
          console.log(raw.scrollHeight);
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
      // return {
      //   restrict: 'A',
      //   link: function(scope, element, attrs) {
      //     var raw = element[0];

      //     element.bind('scroll', function () {
      //       // var yPosition = raw.scrollTop + raw.offsetHeight;
      //       // if (yPosition > scope.lastYPosition) {
      //         console.log('in scroll');
      //         console.log(raw.scrollTop + raw.offsetHeight);
      //         console.log(raw.scrollHeight);
      //       // }
      //       scope.lastYPosition = yPosition;
      //     });
      //   }
      // };
    };
    };
  });


(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [ 
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      console.log(buttons);

      return buttons;
    }
    return factory;
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


//# sourceMappingURL=app.min.js.map

(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

    var $dshBrd = this;

    $scope.draggable = false;
    $scope.deleteEnabled = false;
    $scope.urlsEnabled = true;
    $scope.areIconsLoaded = false;
    $scope.deleteIcon = 'img/_x.png';
    $scope.lockIcon = 'img/_locked.png';

    updateWidgets();

    function instantiateGridster() {
      var width = this.window.outerWidth;
      var adjustedGridOptions = gridOptions;
      if (width > 500) {
        adjustedGridOptions.columns = 7;
      } else {
        adjustedGridOptions.columns = 3;
      }
      return adjustedGridOptions;
    }

    function checkScreenSize() {
      var start = $window.outerWidth;
      if (start > 500) {
        $dshBrd.screenSize = 'lg';
      } else {
        $dshBrd.screenSize = 'sm';
      }
    }

    function updateToolIconSize() { 
      $scope.toolIconSize = 
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
    }

    updateToolIconSize();

    function updateWidgets() {
      checkScreenSize();
      $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth); 
      apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets = 
            $dshBrd.screenSize == 'lg'
            ? $dshBrd.widgetsLg
            : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
    }

    $dshBrd.saveWidgets = function () {
      checkScreenSize();

      if ($dshBrd.screenSize == 'lg') {
        $dshBrd.widgetsLg = $scope.widgets;
      } else {
        $dshBrd.widgetsSm = $scope.widgets;
      }

      console.log('Save: ', $scope.widgets);

      data = [
        $dshBrd.widgetsLg,
        $dshBrd.widgetsSm
      ];

      apiData.updateWidgets(data)
        .success(function (data) {
          console.log("Success!: ", data)
        })
        .error(function (e) {
          console.log(e);
        });
    }

  $scope.createWidget = function () {
    var widgetUrl = $scope.widgetUrl;
    var widgetWeight = $scope.widgetWeight;
    var widgetIcon = $scope.selectedIcon;
    console.log(widgetIcon);

    var defaultIcon = "img/_blank.png";
    // Form validation
    if (!widgetUrl && widgetIcon === defaultIcon) {
      window.alert("Please Enter URL and Select an Icon");
      return;
    } else if (!widgetUrl) {
      window.alert("Please Enter URL");
      return;
    } else if (widgetIcon === defaultIcon) {
      window.alert("Please Select an Icon");
      return;
    }

    function pushNewWidget(size) {
      if (size === 'lg') {
        var len = $dshBrd.widgetsLg.length;
        var columns = 7;
        var newWidget = createNewWidget(len, columns);
        $dshBrd.widgetsLg.push(newWidget);
      } else if (size === 'sm') {
        var len = $dshBrd.widgetsSm.length;
        var columns = 3;
        var newWidget = createNewWidget(len, columns);
        $dshBrd.widgetsSm.push(newWidget);
      }
    }

    function createNewWidget(len, columns) {
      var newWidget = {
        type: 'link-widget',
        icon: widgetIcon,
        url: widgetUrl,
        row: Math.floor(len / columns),
        col: (len % columns) + 1
      }
      return newWidget;
    }

    pushNewWidget('lg');
    pushNewWidget('sm');

    $dshBrd.saveWidgets();
    $location.path('dashboard.view');
  }

  $scope.importWidgets = function () {
    var widgetString = angular.fromJson($scope.widgetString);
    $scope.widgets = widgetString;

    checkScreenSize();
    if ($dshBrd.screenSize == 'lg') {
      $dshBrd.widgetsLg = widgetString;
    } else {
      $dshBrd.widgetsSm = widgetString;
    }

    $dshBrd.saveWidgets();
    $location.path('dashboard.view');
  }

  $scope.deleteWidget = function (widget) {
    console.log("Delete: ", widget);
    $scope.widgets = $scope.widgets.filter(function (element){
      return element.url != widget.url;
    });

    $dshBrd.saveWidgets();
  }

  $scope.toggleDraggable = function () {
    gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
    $scope.urlsEnabled = !$scope.urlsEnabled;

    if ($scope.deleteEnabled) {
      $scope.deleteEnabled = false;
      $scope.deleteIcon = 'img/_x.png';
    }

    if (gridOptions.draggable.enabled) {
      $scope.lockIcon = 'img/_lockedRed.png';
    } else {
      $scope.lockIcon = 'img/_locked.png';
    }

    if (!gridOptions.draggable.enabled)
      $dshBrd.saveWidgets();
  }

  $scope.toggleDelete = function () {
    $scope.deleteEnabled = !$scope.deleteEnabled;
    $scope.urlsEnabled = !$scope.urlsEnabled;

    if ($scope.deleteEnabled) {
      $scope.deleteIcon = 'img/_xRed.png';
    } else {
      $scope.deleteIcon = 'img/_x.png';
    }

    if (gridOptions.draggable.enabled) {
      gridOptions.draggable.enabled = false;
      $scope.lockIcon = 'img/_locked.png';
    }
  }

  function getIcons() {
    apiData.getIcons()
      .success(function (icons) {
        $dshBrd.icons = icons;
        console.log("icons",$dshBrd.icons);
      })
      .finally(function () {
        $dshBrd.allIcons = [];
        var len = $dshBrd.icons.length;

        for (i = 0; i < len; i++) {
          var iconObj = {};
          var iconString = 'img/ico/' + $dshBrd.icons[i];
          iconObj.path = iconString;
          $dshBrd.allIcons.push(iconObj);
        }
        $scope.shownIcons = [];
        $scope.loadSomeIcons();
      });
  }

  $scope.loadAllIcons = function () {
    var allIcons = [];
    var totalIcons = $dshBrd.allIcons.length - 1;
    $scope.areIconsLoaded = true;
    console.log($dshBrd.allIcons);

    for (var i = 0; i <= totalIcons; i++) {
      var newIco = $dshBrd.allIcons[i]
      allIcons.push(newIco);
    }
    $scope.shownIcons = allIcons;
    console.log('shown: ', $scope.shownIcons);
  }

  $scope.loadSomeIcons = function () {
    for (var i = 0; i <= 24; i++) {
      var newIco = $dshBrd.allIcons[i]
      $scope.shownIcons.push(newIco);
    }
  }

  $scope.gridsterModalOptions = gridsterModalOptions;
  $scope.selectedIcon = "img/_blank.png";

  $scope.selectIcon = function (iconPath) {
    $scope.selectedIcon = iconPath;
  }

  $scope.openMainModal = function (size, parentSelector) {
    gridOptions.draggable.enabled = false;
    $scope.deleteEnabled = false;

    var parentElem = parentSelector ?
      angular.element($document[0].querySelector('.modal-demo')) : undefined;

    var modalInstance = $uibModal.open({
      templateUrl: 'mainModal.html',
      controller: 'dashboardCtrl',
      size: 'lg',
      appendTo: parentElem
    });
  };

  $scope.openAuthModal = function (size, parentSelector) {
    var parentElem = parentSelector ?
      angular.element($document[0].querySelector('.main-modal')) : undefined;

    var modalInstance = $uibModal.open({
      templateUrl: 'authModal.html',
      controller: 'authCtrl',
      controllerAs: '$auth',
      appendTo: parentElem,
    });
  };

  $scope.onLogout = function () {
    auth.logout();
    $location.path('dashboard.view');
  }

  $scope.syncWidgets = function () {
    $dshBrd.widgetsLg = $scope.widgets;
    $dshBrd.widgetsSm = $scope.widgets;
    $dshBrd.saveWidgets();
    $location.path('dashboard.view');
  }

  $scope.resetWidgets = function () {
    checkScreenSize();

    apiData.getDefaultGrid()
      .success(function (defaultGrid) {
        defaultGrid = angular.fromJson(defaultGrid);
        $scope.widgets = defaultGrid;
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = defaultGrid;
        } else {
          $dshBrd.widgetsSm = defaultGrid;
        }
      })
      .error(function (e) {
        console.log(e);
      })
      .finally(function () {
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      });
  }

  $scope.clearGrid = function () {
    $scope.widgets = [];
    if ($dshBrd.screenSize == 'lg') {
      $dshBrd.widgetsLg = [];
    } else {
      $dshBrd.widgetsSm = [];
    }
    $dshBrd.saveWidgets();
    $location.path('dashboard.view');
  }

  var resizeBreaks = {
    'sm' : 500
  };

  function inputScreenSize(width) {
    if (width > 500) {
      return 'lg';
    } else {
      return 'sm';
    }
  }

  function logIt(type) {
    console.log("Type:", type);
  }

  angular.element($window).bind('resize', function () {
    var oldWidth = $dshBrd.currentWidth;
    var oldSize = $dshBrd.lastScreenSize;
    var newWidth = $window.outerWidth;
    var newSize = inputScreenSize(newWidth);

    if (oldSize !== newSize) {
      $location.path('dashboard.view');
    }

    $dshBrd.lastScreenSize = newSize;
  });

  $scope.logIt = function (widget) {
    console.log(widget);
  }

};
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        console.log(attrs);
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];
        console.log('loading directive');

        element.bind('scroll', function () {
          console.log('in scroll');
          console.log(raw.scrollTop + raw.offsetHeight);
          console.log(raw.scrollHeight);
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
      // return {
      //   restrict: 'A',
      //   link: function(scope, element, attrs) {
      //     var raw = element[0];

      //     element.bind('scroll', function () {
      //       // var yPosition = raw.scrollTop + raw.offsetHeight;
      //       // if (yPosition > scope.lastYPosition) {
      //         console.log('in scroll');
      //         console.log(raw.scrollTop + raw.offsetHeight);
      //         console.log(raw.scrollHeight);
      //       // }
      //       scope.lastYPosition = yPosition;
      //     });
      //   }
      // };
    };
    };
  });


(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [ 
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      console.log(buttons);

      return buttons;
    }
    return factory;
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


//# sourceMappingURL=app.min.js.map

(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
  .module('nerveCenter')
  .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

      var $dshBrd = this;

      $scope.draggable = false;
      $scope.deleteEnabled = false;
      $scope.urlsEnabled = true;
      $scope.areIconsLoaded = false;
      $scope.deleteIcon = 'img/_x.png';
      $scope.lockIcon = 'img/_locked.png';

      updateWidgets();

      function instantiateGridster() {
        var width = this.window.outerWidth;
        var adjustedGridOptions = gridOptions;
        if (width > 500) {
          adjustedGridOptions.columns = 7;
        } else {
          adjustedGridOptions.columns = 3;
        }
        return adjustedGridOptions;
      }

      function checkScreenSize() {
        var start = $window.outerWidth;
        if (start > 500) {
          $dshBrd.screenSize = 'lg';
        } else {
          $dshBrd.screenSize = 'sm';
        }
      }

      function updateToolIconSize() {
        $scope.toolIconSize =
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
      }

      updateToolIconSize();

      function updateWidgets() {
        checkScreenSize();
        $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth);
        apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets =
          $dshBrd.screenSize == 'lg'
          ? $dshBrd.widgetsLg
          : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
      }

      $dshBrd.saveWidgets = function () {
        checkScreenSize();

        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = $scope.widgets;
        } else {
          $dshBrd.widgetsSm = $scope.widgets;
        }

        data = [
          $dshBrd.widgetsLg,
          $dshBrd.widgetsSm
        ];

        apiData.updateWidgets(data)
        .success(function (data) {
          console.log('Successfully updated widgets')
        })
        .error(function (e) {
          console.log(e);
        });
      }

      $scope.createWidget = function () {
        var widgetUrl = $scope.widgetUrl;
        var widgetWeight = $scope.widgetWeight;
        var widgetIcon = $scope.selectedIcon;

        var defaultIcon = "img/_blank.png";
        // Form validation
        if (!widgetUrl && widgetIcon === defaultIcon) {
          window.alert("Please Enter URL and Select an Icon");
          return;
        } else if (!widgetUrl) {
          window.alert("Please Enter URL");
          return;
        } else if (widgetIcon === defaultIcon) {
          window.alert("Please Select an Icon");
          return;
        }

        function pushNewWidget(size) {
          if (size === 'lg') {
            var len = $dshBrd.widgetsLg.length;
            var columns = 7;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsLg.push(newWidget);
          } else if (size === 'sm') {
            var len = $dshBrd.widgetsSm.length;
            var columns = 3;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsSm.push(newWidget);
          }
        }

        function createNewWidget(len, columns) {
          var newWidget = {
            type: 'link-widget',
            icon: widgetIcon,
            url: widgetUrl,
            row: Math.floor(len / columns),
            col: (len % columns) + 1
          }
          return newWidget;
        }

        pushNewWidget('lg');
        pushNewWidget('sm');

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.importWidgets = function () {
        var widgetString = angular.fromJson($scope.widgetString);
        $scope.widgets = widgetString;

        checkScreenSize();
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = widgetString;
        } else {
          $dshBrd.widgetsSm = widgetString;
        }

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.deleteWidget = function (widget) {
        $scope.widgets = $scope.widgets.filter(function (element){
          return element.url != widget.url;
        });

        $dshBrd.saveWidgets();
      }

      $scope.toggleDraggable = function () {
        gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteEnabled = false;
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          $scope.lockIcon = 'img/_lockedRed.png';
        } else {
          $scope.lockIcon = 'img/_locked.png';
        }

        if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
      }

      $scope.toggleDelete = function () {
        $scope.deleteEnabled = !$scope.deleteEnabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteIcon = 'img/_xRed.png';
        } else {
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          gridOptions.draggable.enabled = false;
          $scope.lockIcon = 'img/_locked.png';
        }
      }

      function getIcons() {
        apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
      }

      $scope.loadAllIcons = function () {
        var allIcons = [];
        var totalIcons = $dshBrd.allIcons.length - 1;
        $scope.areIconsLoaded = true;

        for (var i = 0; i <= totalIcons; i++) {
          var newIco = $dshBrd.allIcons[i]
          allIcons.push(newIco);
        }
        $scope.shownIcons = allIcons;
      }

      $scope.loadSomeIcons = function () {
        for (var i = 0; i <= 24; i++) {
          var newIco = $dshBrd.allIcons[i]
          $scope.shownIcons.push(newIco);
        }
      }

      $scope.gridsterModalOptions = gridsterModalOptions;
      $scope.selectedIcon = "img/_blank.png";

      $scope.selectIcon = function (iconPath) {
        $scope.selectedIcon = iconPath;
      }

      $scope.openMainModal = function (size, parentSelector) {
        gridOptions.draggable.enabled = false;
        $scope.deleteEnabled = false;

        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'mainModal.html',
          controller: 'dashboardCtrl',
          size: 'lg',
          appendTo: parentElem
        });
      };

      $scope.openAuthModal = function (size, parentSelector) {
        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'authModal.html',
          controller: 'authCtrl',
          controllerAs: '$auth',
          appendTo: parentElem,
        });
      };

      $scope.onLogout = function () {
        auth.logout();
        $location.path('dashboard.view');
      }

      $scope.syncWidgets = function () {
        $dshBrd.widgetsLg = $scope.widgets;
        $dshBrd.widgetsSm = $scope.widgets;
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.resetWidgets = function () {
        checkScreenSize();

        apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
      }

      $scope.clearGrid = function () {
        $scope.widgets = [];
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = [];
        } else {
          $dshBrd.widgetsSm = [];
        }
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      var resizeBreaks = {
        'sm' : 500
      };

      function inputScreenSize(width) {
        if (width > 500) {
          return 'lg';
        } else {
          return 'sm';
        }
      }

      angular.element($window).bind('resize', function () {
        var oldWidth = $dshBrd.currentWidth;
        var oldSize = $dshBrd.lastScreenSize;
        var newWidth = $window.outerWidth;
        var newSize = inputScreenSize(newWidth);

        if (oldSize !== newSize) {
          $location.path('dashboard.view');
        }

        $dshBrd.lastScreenSize = newSize;
      });
    };
  })();

(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();

(function () {

  angular
  .module('nerveCenter')
  .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];

        element.bind('scroll', function () {
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
    };
  };
});

(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      return buttons;
    }
    return factory;
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


//# sourceMappingURL=app.min.js.map

(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
  .module('nerveCenter')
  .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

      var $dshBrd = this;

      $scope.draggable = false;
      $scope.deleteEnabled = false;
      $scope.urlsEnabled = true;
      $scope.areIconsLoaded = false;
      $scope.deleteIcon = 'img/_x.png';
      $scope.lockIcon = 'img/_locked.png';

      updateWidgets();

      function instantiateGridster() {
        var width = this.window.outerWidth;
        var adjustedGridOptions = gridOptions;
        if (width > 500) {
          adjustedGridOptions.columns = 7;
        } else {
          adjustedGridOptions.columns = 3;
        }
        return adjustedGridOptions;
      }

      function checkScreenSize() {
        var start = $window.outerWidth;
        if (start > 500) {
          $dshBrd.screenSize = 'lg';
        } else {
          $dshBrd.screenSize = 'sm';
        }
      }

      function updateToolIconSize() {
        $scope.toolIconSize =
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
      }

      updateToolIconSize();

      function updateWidgets() {
        checkScreenSize();
        $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth);
        apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets =
          $dshBrd.screenSize == 'lg'
          ? $dshBrd.widgetsLg
          : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
      }

      $dshBrd.saveWidgets = function () {
        checkScreenSize();

        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = $scope.widgets;
        } else {
          $dshBrd.widgetsSm = $scope.widgets;
        }

        data = [
          $dshBrd.widgetsLg,
          $dshBrd.widgetsSm
        ];

        apiData.updateWidgets(data)
        .success(function (data) {
          console.log('Successfully updated widgets')
        })
        .error(function (e) {
          console.log(e);
        });
      }

      $scope.createWidget = function () {
        var widgetUrl = $scope.widgetUrl;
        var widgetWeight = $scope.widgetWeight;
        var widgetIcon = $scope.selectedIcon;

        var defaultIcon = "img/_blank.png";
        // Form validation
        if (!widgetUrl && widgetIcon === defaultIcon) {
          window.alert("Please Enter URL and Select an Icon");
          return;
        } else if (!widgetUrl) {
          window.alert("Please Enter URL");
          return;
        } else if (widgetIcon === defaultIcon) {
          window.alert("Please Select an Icon");
          return;
        }

        function pushNewWidget(size) {
          if (size === 'lg') {
            var len = $dshBrd.widgetsLg.length;
            var columns = 7;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsLg.push(newWidget);
          } else if (size === 'sm') {
            var len = $dshBrd.widgetsSm.length;
            var columns = 3;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsSm.push(newWidget);
          }
        }

        function createNewWidget(len, columns) {
          var newWidget = {
            type: 'link-widget',
            icon: widgetIcon,
            url: widgetUrl,
            row: Math.floor(len / columns),
            col: (len % columns) + 1
          }
          return newWidget;
        }

        pushNewWidget('lg');
        pushNewWidget('sm');

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.importWidgets = function () {
        var widgetString = angular.fromJson($scope.widgetString);
        $scope.widgets = widgetString;

        checkScreenSize();
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = widgetString;
        } else {
          $dshBrd.widgetsSm = widgetString;
        }

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.deleteWidget = function (widget) {
        $scope.widgets = $scope.widgets.filter(function (element){
          return element.url != widget.url;
        });

        $dshBrd.saveWidgets();
      }

      $scope.toggleDraggable = function () {
        gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteEnabled = false;
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          $scope.lockIcon = 'img/_lockedRed.png';
        } else {
          $scope.lockIcon = 'img/_locked.png';
        }

        if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
      }

      $scope.toggleDelete = function () {
        $scope.deleteEnabled = !$scope.deleteEnabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteIcon = 'img/_xRed.png';
        } else {
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          gridOptions.draggable.enabled = false;
          $scope.lockIcon = 'img/_locked.png';
        }
      }

      function getIcons() {
        apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
      }

      $scope.loadAllIcons = function () {
        var allIcons = [];
        var totalIcons = $dshBrd.allIcons.length - 1;
        $scope.areIconsLoaded = true;

        for (var i = 0; i <= totalIcons; i++) {
          var newIco = $dshBrd.allIcons[i]
          allIcons.push(newIco);
        }
        $scope.shownIcons = allIcons;
      }

      $scope.loadSomeIcons = function () {
        for (var i = 0; i <= 24; i++) {
          var newIco = $dshBrd.allIcons[i]
          $scope.shownIcons.push(newIco);
        }
      }

      $scope.gridsterModalOptions = gridsterModalOptions;
      $scope.selectedIcon = "img/_blank.png";

      $scope.selectIcon = function (iconPath) {
        $scope.selectedIcon = iconPath;
      }

      $scope.openMainModal = function (size, parentSelector) {
        gridOptions.draggable.enabled = false;
        $scope.deleteEnabled = false;

        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'mainModal.html',
          controller: 'dashboardCtrl',
          size: 'lg',
          appendTo: parentElem
        });
      };

      $scope.openAuthModal = function (size, parentSelector) {
        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'authModal.html',
          controller: 'authCtrl',
          controllerAs: '$auth',
          appendTo: parentElem,
        });
      };

      $scope.onLogout = function () {
        auth.logout();
        $location.path('dashboard.view');
      }

      $scope.syncWidgets = function () {
        $dshBrd.widgetsLg = $scope.widgets;
        $dshBrd.widgetsSm = $scope.widgets;
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.resetWidgets = function () {
        checkScreenSize();

        apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
      }

      $scope.clearGrid = function () {
        $scope.widgets = [];
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = [];
        } else {
          $dshBrd.widgetsSm = [];
        }
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      var resizeBreaks = {
        'sm' : 500
      };

      function inputScreenSize(width) {
        if (width > 500) {
          return 'lg';
        } else {
          return 'sm';
        }
      }

      angular.element($window).bind('resize', function () {
        var oldWidth = $dshBrd.currentWidth;
        var oldSize = $dshBrd.lastScreenSize;
        var newWidth = $window.outerWidth;
        var newSize = inputScreenSize(newWidth);

        if (oldSize !== newSize) {
          $location.path('dashboard.view');
        }

        $dshBrd.lastScreenSize = newSize;
      });
    };
  })();

(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();

(function () {

  angular
  .module('nerveCenter')
  .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];

        element.bind('scroll', function () {
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
    };
  };
});

(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      return buttons;
    }
    return factory;
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


//# sourceMappingURL=app.min.js.map

(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };

    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
  .module('nerveCenter')
  .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

      var $dshBrd = this;

      $scope.draggable = false;
      $scope.deleteEnabled = false;
      $scope.urlsEnabled = true;
      $scope.areIconsLoaded = false;
      $scope.deleteIcon = 'img/_x.png';
      $scope.lockIcon = 'img/_locked.png';

      updateWidgets();

      function instantiateGridster() {
        var width = this.window.outerWidth;
        var adjustedGridOptions = gridOptions;
        if (width > 500) {
          adjustedGridOptions.columns = 7;
        } else {
          adjustedGridOptions.columns = 3;
        }
        return adjustedGridOptions;
      }

      function checkScreenSize() {
        var start = $window.outerWidth;
        if (start > 500) {
          $dshBrd.screenSize = 'lg';
        } else {
          $dshBrd.screenSize = 'sm';
        }
      }

      function updateToolIconSize() {
        $scope.toolIconSize =
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
      }

      updateToolIconSize();

      function updateWidgets() {
        checkScreenSize();
        $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth);
        apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets =
          $dshBrd.screenSize == 'lg'
          ? $dshBrd.widgetsLg
          : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
      }

      $dshBrd.saveWidgets = function () {
        checkScreenSize();

        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = $scope.widgets;
        } else {
          $dshBrd.widgetsSm = $scope.widgets;
        }

        data = [
          $dshBrd.widgetsLg,
          $dshBrd.widgetsSm
        ];

        apiData.updateWidgets(data)
        .success(function (data) {
          console.log('Successfully updated widgets')
        })
        .error(function (e) {
          console.log(e);
        });
      }

      $scope.createWidget = function () {
        var widgetUrl = $scope.widgetUrl;
        var widgetWeight = $scope.widgetWeight;
        var widgetIcon = $scope.selectedIcon;

        var defaultIcon = "img/_blank.png";
        // Form validation
        if (!widgetUrl && widgetIcon === defaultIcon) {
          window.alert("Please Enter URL and Select an Icon");
          return;
        } else if (!widgetUrl) {
          window.alert("Please Enter URL");
          return;
        } else if (widgetIcon === defaultIcon) {
          window.alert("Please Select an Icon");
          return;
        }

        function pushNewWidget(size) {
          if (size === 'lg') {
            var len = $dshBrd.widgetsLg.length;
            var columns = 7;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsLg.push(newWidget);
          } else if (size === 'sm') {
            var len = $dshBrd.widgetsSm.length;
            var columns = 3;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsSm.push(newWidget);
          }
        }

        function createNewWidget(len, columns) {
          var newWidget = {
            type: 'link-widget',
            icon: widgetIcon,
            url: widgetUrl,
            row: Math.floor(len / columns),
            col: (len % columns) + 1
          }
          return newWidget;
        }

        pushNewWidget('lg');
        pushNewWidget('sm');

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.importWidgets = function () {
        var widgetString = angular.fromJson($scope.widgetString);
        $scope.widgets = widgetString;

        checkScreenSize();
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = widgetString;
        } else {
          $dshBrd.widgetsSm = widgetString;
        }

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.deleteWidget = function (widget) {
        $scope.widgets = $scope.widgets.filter(function (element){
          return element.url != widget.url;
        });

        $dshBrd.saveWidgets();
      }

      $scope.toggleDraggable = function () {
        gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteEnabled = false;
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          $scope.lockIcon = 'img/_lockedRed.png';
        } else {
          $scope.lockIcon = 'img/_locked.png';
        }

        if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
      }

      $scope.toggleDelete = function () {
        $scope.deleteEnabled = !$scope.deleteEnabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteIcon = 'img/_xRed.png';
        } else {
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          gridOptions.draggable.enabled = false;
          $scope.lockIcon = 'img/_locked.png';
        }
      }

      function getIcons() {
        apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
      }

      $scope.loadAllIcons = function () {
        var allIcons = [];
        var totalIcons = $dshBrd.allIcons.length - 1;
        $scope.areIconsLoaded = true;

        for (var i = 0; i <= totalIcons; i++) {
          var newIco = $dshBrd.allIcons[i]
          allIcons.push(newIco);
        }
        $scope.shownIcons = allIcons;
      }

      $scope.loadSomeIcons = function () {
        for (var i = 0; i <= 24; i++) {
          var newIco = $dshBrd.allIcons[i]
          $scope.shownIcons.push(newIco);
        }
      }

      $scope.gridsterModalOptions = gridsterModalOptions;
      $scope.selectedIcon = "img/_blank.png";

      $scope.selectIcon = function (iconPath) {
        $scope.selectedIcon = iconPath;
      }

      $scope.openMainModal = function (size, parentSelector) {
        gridOptions.draggable.enabled = false;
        $scope.deleteEnabled = false;

        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'mainModal.html',
          controller: 'dashboardCtrl',
          size: 'lg',
          appendTo: parentElem
        });
      };

      $scope.openAuthModal = function (size, parentSelector) {
        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'authModal.html',
          controller: 'authCtrl',
          controllerAs: '$auth',
          appendTo: parentElem,
        });
      };

      $scope.onLogout = function () {
        auth.logout();
        $location.path('dashboard.view');
      }

      $scope.syncWidgets = function () {
        $dshBrd.widgetsLg = $scope.widgets;
        $dshBrd.widgetsSm = $scope.widgets;
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.resetWidgets = function () {
        checkScreenSize();

        apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
      }

      $scope.clearGrid = function () {
        $scope.widgets = [];
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = [];
        } else {
          $dshBrd.widgetsSm = [];
        }
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      var resizeBreaks = {
        'sm' : 500
      };

      function inputScreenSize(width) {
        if (width > 500) {
          return 'lg';
        } else {
          return 'sm';
        }
      }

      angular.element($window).bind('resize', function () {
        var oldWidth = $dshBrd.currentWidth;
        var oldSize = $dshBrd.lastScreenSize;
        var newWidth = $window.outerWidth;
        var newSize = inputScreenSize(newWidth);

        if (oldSize !== newSize) {
          $location.path('dashboard.view');
        }

        $dshBrd.lastScreenSize = newSize;
      });
    };
  })();

(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();

(function () {

  angular
  .module('nerveCenter')
  .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];

        element.bind('scroll', function () {
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
    };
  };
});

(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      return buttons;
    }
    return factory;
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


//# sourceMappingURL=app.min.js.map

(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };

    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
  .module('nerveCenter')
  .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

      var $dshBrd = this;

      $scope.draggable = false;
      $scope.deleteEnabled = false;
      $scope.urlsEnabled = true;
      $scope.areIconsLoaded = false;
      $scope.deleteIcon = 'img/_x.png';
      $scope.lockIcon = 'img/_locked.png';

      updateWidgets();

      function instantiateGridster() {
        var width = this.window.outerWidth;
        var adjustedGridOptions = gridOptions;
        if (width > 500) {
          adjustedGridOptions.columns = 7;
        } else {
          adjustedGridOptions.columns = 3;
        }
        return adjustedGridOptions;
      }

      function checkScreenSize() {
        var start = $window.outerWidth;
        if (start > 500) {
          $dshBrd.screenSize = 'lg';
        } else {
          $dshBrd.screenSize = 'sm';
        }
      }

      function updateToolIconSize() {
        $scope.toolIconSize =
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
      }

      updateToolIconSize();

      function updateWidgets() {
        checkScreenSize();
        $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth);
        apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets =
          $dshBrd.screenSize == 'lg'
          ? $dshBrd.widgetsLg
          : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
      }

      $dshBrd.saveWidgets = function () {
        checkScreenSize();

        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = $scope.widgets;
        } else {
          $dshBrd.widgetsSm = $scope.widgets;
        }

        data = [
          $dshBrd.widgetsLg,
          $dshBrd.widgetsSm
        ];

        apiData.updateWidgets(data)
        .success(function (data) {
          console.log('Successfully updated widgets')
        })
        .error(function (e) {
          console.log(e);
        });
      }

      $scope.createWidget = function () {
        var widgetUrl = $scope.widgetUrl;
        var widgetWeight = $scope.widgetWeight;
        var widgetIcon = $scope.selectedIcon;

        var defaultIcon = "img/_blank.png";
        // Form validation
        if (!widgetUrl && widgetIcon === defaultIcon) {
          window.alert("Please Enter URL and Select an Icon");
          return;
        } else if (!widgetUrl) {
          window.alert("Please Enter URL");
          return;
        } else if (widgetIcon === defaultIcon) {
          window.alert("Please Select an Icon");
          return;
        }

        function pushNewWidget(size) {
          if (size === 'lg') {
            var len = $dshBrd.widgetsLg.length;
            var columns = 7;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsLg.push(newWidget);
          } else if (size === 'sm') {
            var len = $dshBrd.widgetsSm.length;
            var columns = 3;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsSm.push(newWidget);
          }
        }

        function createNewWidget(len, columns) {
          var newWidget = {
            type: 'link-widget',
            icon: widgetIcon,
            url: widgetUrl,
            row: Math.floor(len / columns),
            col: (len % columns) + 1
          }
          return newWidget;
        }

        pushNewWidget('lg');
        pushNewWidget('sm');

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.importWidgets = function () {
        var widgetString = angular.fromJson($scope.widgetString);
        $scope.widgets = widgetString;

        checkScreenSize();
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = widgetString;
        } else {
          $dshBrd.widgetsSm = widgetString;
        }

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.deleteWidget = function (widget) {
        $scope.widgets = $scope.widgets.filter(function (element){
          return element.url != widget.url;
        });

        $dshBrd.saveWidgets();
      }

      $scope.toggleDraggable = function () {
        gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteEnabled = false;
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          $scope.lockIcon = 'img/_lockedRed.png';
        } else {
          $scope.lockIcon = 'img/_locked.png';
        }

        if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
      }

      $scope.toggleDelete = function () {
        $scope.deleteEnabled = !$scope.deleteEnabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteIcon = 'img/_xRed.png';
        } else {
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          gridOptions.draggable.enabled = false;
          $scope.lockIcon = 'img/_locked.png';
        }
      }

      function getIcons() {
        apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
      }

      $scope.loadAllIcons = function () {
        var allIcons = [];
        var totalIcons = $dshBrd.allIcons.length - 1;
        $scope.areIconsLoaded = true;

        for (var i = 0; i <= totalIcons; i++) {
          var newIco = $dshBrd.allIcons[i]
          allIcons.push(newIco);
        }
        $scope.shownIcons = allIcons;
      }

      $scope.loadSomeIcons = function () {
        for (var i = 0; i <= 24; i++) {
          var newIco = $dshBrd.allIcons[i]
          $scope.shownIcons.push(newIco);
        }
      }

      $scope.gridsterModalOptions = gridsterModalOptions;
      $scope.selectedIcon = "img/_blank.png";

      $scope.selectIcon = function (iconPath) {
        $scope.selectedIcon = iconPath;
      }

      $scope.openMainModal = function (size, parentSelector) {
        gridOptions.draggable.enabled = false;
        $scope.deleteEnabled = false;

        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'mainModal.html',
          controller: 'dashboardCtrl',
          size: 'lg',
          appendTo: parentElem
        });
      };

      $scope.openAuthModal = function (size, parentSelector) {
        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'authModal.html',
          controller: 'authCtrl',
          controllerAs: '$auth',
          appendTo: parentElem,
        });
      };

      $scope.onLogout = function () {
        auth.logout();
        $location.path('dashboard.view');
      }

      $scope.syncWidgets = function () {
        $dshBrd.widgetsLg = $scope.widgets;
        $dshBrd.widgetsSm = $scope.widgets;
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.resetWidgets = function () {
        checkScreenSize();

        apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
      }

      $scope.clearGrid = function () {
        $scope.widgets = [];
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = [];
        } else {
          $dshBrd.widgetsSm = [];
        }
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      var resizeBreaks = {
        'sm' : 500
      };

      function inputScreenSize(width) {
        if (width > 500) {
          return 'lg';
        } else {
          return 'sm';
        }
      }

      angular.element($window).bind('resize', function () {
        var oldWidth = $dshBrd.currentWidth;
        var oldSize = $dshBrd.lastScreenSize;
        var newWidth = $window.outerWidth;
        var newSize = inputScreenSize(newWidth);

        if (oldSize !== newSize) {
          $location.path('dashboard.view');
        }

        $dshBrd.lastScreenSize = newSize;
      });
    };
  })();

(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();

(function () {

  angular
  .module('nerveCenter')
  .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];

        element.bind('scroll', function () {
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
    };
  };
});

(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      return buttons;
    }
    return factory;
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


//# sourceMappingURL=app.min.js.map

(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };

    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
  .module('nerveCenter')
  .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

      var $dshBrd = this;

      $scope.draggable = false;
      $scope.deleteEnabled = false;
      $scope.urlsEnabled = true;
      $scope.areIconsLoaded = false;
      $scope.deleteIcon = 'img/_x.png';
      $scope.lockIcon = 'img/_locked.png';

      updateWidgets();

      function instantiateGridster() {
        var width = this.window.outerWidth;
        var adjustedGridOptions = gridOptions;
        if (width > 500) {
          adjustedGridOptions.columns = 7;
        } else {
          adjustedGridOptions.columns = 3;
        }
        return adjustedGridOptions;
      }

      function checkScreenSize() {
        var start = $window.outerWidth;
        if (start > 500) {
          $dshBrd.screenSize = 'lg';
        } else {
          $dshBrd.screenSize = 'sm';
        }
      }

      function updateToolIconSize() {
        $scope.toolIconSize =
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
      }

      updateToolIconSize();

      function updateWidgets() {
        checkScreenSize();
        $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth);
        apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets =
          $dshBrd.screenSize == 'lg'
          ? $dshBrd.widgetsLg
          : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
      }

      $dshBrd.saveWidgets = function () {
        checkScreenSize();

        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = $scope.widgets;
        } else {
          $dshBrd.widgetsSm = $scope.widgets;
        }

        data = [
          $dshBrd.widgetsLg,
          $dshBrd.widgetsSm
        ];

        apiData.updateWidgets(data)
        .success(function (data) {
          console.log('Successfully updated widgets')
        })
        .error(function (e) {
          console.log(e);
        });
      }

      $scope.createWidget = function () {
        var widgetUrl = $scope.widgetUrl;
        var widgetWeight = $scope.widgetWeight;
        var widgetIcon = $scope.selectedIcon;

        var defaultIcon = "img/_blank.png";
        // Form validation
        if (!widgetUrl && widgetIcon === defaultIcon) {
          window.alert("Please Enter URL and Select an Icon");
          return;
        } else if (!widgetUrl) {
          window.alert("Please Enter URL");
          return;
        } else if (widgetIcon === defaultIcon) {
          window.alert("Please Select an Icon");
          return;
        }

        function pushNewWidget(size) {
          if (size === 'lg') {
            var len = $dshBrd.widgetsLg.length;
            var columns = 7;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsLg.push(newWidget);
          } else if (size === 'sm') {
            var len = $dshBrd.widgetsSm.length;
            var columns = 3;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsSm.push(newWidget);
          }
        }

        function createNewWidget(len, columns) {
          var newWidget = {
            type: 'link-widget',
            icon: widgetIcon,
            url: widgetUrl,
            row: Math.floor(len / columns),
            col: (len % columns) + 1
          }
          return newWidget;
        }

        pushNewWidget('lg');
        pushNewWidget('sm');

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.importWidgets = function () {
        var widgetString = angular.fromJson($scope.widgetString);
        $scope.widgets = widgetString;

        checkScreenSize();
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = widgetString;
        } else {
          $dshBrd.widgetsSm = widgetString;
        }

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.deleteWidget = function (widget) {
        $scope.widgets = $scope.widgets.filter(function (element){
          return element.url != widget.url;
        });

        $dshBrd.saveWidgets();
      }

      $scope.toggleDraggable = function () {
        gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteEnabled = false;
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          $scope.lockIcon = 'img/_lockedRed.png';
        } else {
          $scope.lockIcon = 'img/_locked.png';
        }

        if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
      }

      $scope.toggleDelete = function () {
        $scope.deleteEnabled = !$scope.deleteEnabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteIcon = 'img/_xRed.png';
        } else {
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          gridOptions.draggable.enabled = false;
          $scope.lockIcon = 'img/_locked.png';
        }
      }

      function getIcons() {
        apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
      }

      $scope.loadAllIcons = function () {
        var allIcons = [];
        var totalIcons = $dshBrd.allIcons.length - 1;
        $scope.areIconsLoaded = true;

        for (var i = 0; i <= totalIcons; i++) {
          var newIco = $dshBrd.allIcons[i]
          allIcons.push(newIco);
        }
        $scope.shownIcons = allIcons;
      }

      $scope.loadSomeIcons = function () {
        for (var i = 0; i <= 24; i++) {
          var newIco = $dshBrd.allIcons[i]
          $scope.shownIcons.push(newIco);
        }
      }

      $scope.gridsterModalOptions = gridsterModalOptions;
      $scope.selectedIcon = "img/_blank.png";

      $scope.selectIcon = function (iconPath) {
        $scope.selectedIcon = iconPath;
      }

      $scope.openMainModal = function (size, parentSelector) {
        gridOptions.draggable.enabled = false;
        $scope.deleteEnabled = false;

        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'mainModal.html',
          controller: 'dashboardCtrl',
          size: 'lg',
          appendTo: parentElem
        });
      };

      $scope.openAuthModal = function (size, parentSelector) {
        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'authModal.html',
          controller: 'authCtrl',
          controllerAs: '$auth',
          appendTo: parentElem,
        });
      };

      $scope.onLogout = function () {
        auth.logout();
        $location.path('dashboard.view');
      }

      $scope.syncWidgets = function () {
        $dshBrd.widgetsLg = $scope.widgets;
        $dshBrd.widgetsSm = $scope.widgets;
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.resetWidgets = function () {
        checkScreenSize();

        apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
      }

      $scope.clearGrid = function () {
        $scope.widgets = [];
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = [];
        } else {
          $dshBrd.widgetsSm = [];
        }
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      var resizeBreaks = {
        'sm' : 500
      };

      function inputScreenSize(width) {
        if (width > 500) {
          return 'lg';
        } else {
          return 'sm';
        }
      }

      angular.element($window).bind('resize', function () {
        var oldWidth = $dshBrd.currentWidth;
        var oldSize = $dshBrd.lastScreenSize;
        var newWidth = $window.outerWidth;
        var newSize = inputScreenSize(newWidth);

        if (oldSize !== newSize) {
          $location.path('dashboard.view');
        }

        $dshBrd.lastScreenSize = newSize;
      });
    };
  })();

(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();

(function () {

  angular
  .module('nerveCenter')
  .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];

        element.bind('scroll', function () {
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
    };
  };
});

(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function(data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      return buttons;
    }
    return factory;
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


//# sourceMappingURL=app.min.js.map

(function () {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster', 'infinite-scroll', 'ds.clock']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {
  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'apiData'];
  function authCtrl($location, auth, apiData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function () {
      auth
        .register($auth.credentials)
        .error(function(err) {
          alert("Sorry, you didn't fill in both fields.\nPlease try again.");
        })
        .then(function () {
          auth.login($auth.credentials)
          $location.path('../dashboard/dashboard.view');
        });
    };

    $auth.user = {};

    $auth.onLogin = function () {
      auth
        .login($auth.credentials)
        .error(function(err) {
          alert("Sorry, the username and password you entered don't match.\nPlease try again.");
        })
        .then(function () {
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function () {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function () {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function () {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function () {

  angular
  .module('nerveCenter')
  .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location,
    $uibModal, $log, $document, $filter, $window, apiData, auth) {

      var $dshBrd = this;

      $scope.draggable = false;
      $scope.deleteEnabled = false;
      $scope.urlsEnabled = true;
      $scope.areIconsLoaded = false;
      $scope.deleteIcon = 'img/_x.png';
      $scope.lockIcon = 'img/_locked.png';

      updateWidgets();

      function instantiateGridster() {
        var width = this.window.outerWidth;
        var adjustedGridOptions = gridOptions;
        if (width > 500) {
          adjustedGridOptions.columns = 7;
        } else {
          adjustedGridOptions.columns = 3;
        }
        return adjustedGridOptions;
      }

      function checkScreenSize() {
        var start = $window.outerWidth;
        if (start > 500) {
          $dshBrd.screenSize = 'lg';
        } else {
          $dshBrd.screenSize = 'sm';
        }
      }

      function updateToolIconSize() {
        $scope.toolIconSize =
        $dshBrd.screenSize == 'sm'
        ? $scope.toolIconSize = 28 + 'px'
        : $scope.toolIconSize = 20 + 'px';
      }

      updateToolIconSize();

      function updateWidgets() {
        checkScreenSize();
        $dshBrd.lastScreenSize = inputScreenSize($window.outerWidth);
        apiData.getProfile()
        .success(function (user) {
          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);
          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);
        })
        .error(function () {
          $scope.openAuthModal();
        })
        .finally(function () {
          $scope.widgets =
          $dshBrd.screenSize == 'lg'
          ? $dshBrd.widgetsLg
          : $dshBrd.widgetsSm;

          $scope.gridOptions = instantiateGridster();
          $dshBrd.currentWidth = $window.outerWidth;

          getIcons();
        });
      }

      $dshBrd.saveWidgets = function () {
        checkScreenSize();

        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = $scope.widgets;
        } else {
          $dshBrd.widgetsSm = $scope.widgets;
        }

        data = [
          $dshBrd.widgetsLg,
          $dshBrd.widgetsSm
        ];

        apiData.updateWidgets(data)
        .success(function (data) {
          console.log('Successfully updated widgets')
        })
        .error(function (e) {
          console.log(e);
        });
      }

      $scope.createWidget = function () {
        var widgetUrl = $scope.widgetUrl;
        var widgetWeight = $scope.widgetWeight;
        var widgetIcon = $scope.selectedIcon;

        var defaultIcon = "img/_blank.png";
        // Form validation
        if (!widgetUrl && widgetIcon === defaultIcon) {
          window.alert("Please Enter URL and Select an Icon");
          return;
        } else if (!widgetUrl) {
          window.alert("Please Enter URL");
          return;
        } else if (widgetIcon === defaultIcon) {
          window.alert("Please Select an Icon");
          return;
        }

        function pushNewWidget(size) {
          if (size === 'lg') {
            var len = $dshBrd.widgetsLg.length;
            var columns = 7;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsLg.push(newWidget);
          } else if (size === 'sm') {
            var len = $dshBrd.widgetsSm.length;
            var columns = 3;
            var newWidget = createNewWidget(len, columns);
            $dshBrd.widgetsSm.push(newWidget);
          }
        }

        function createNewWidget(len, columns) {
          var newWidget = {
            type: 'link-widget',
            icon: widgetIcon,
            url: widgetUrl,
            row: Math.floor(len / columns),
            col: (len % columns) + 1
          }
          return newWidget;
        }

        pushNewWidget('lg');
        pushNewWidget('sm');

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.importWidgets = function () {
        var widgetString = angular.fromJson($scope.widgetString);
        $scope.widgets = widgetString;

        checkScreenSize();
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = widgetString;
        } else {
          $dshBrd.widgetsSm = widgetString;
        }

        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.deleteWidget = function (widget) {
        $scope.widgets = $scope.widgets.filter(function (element){
          return element.url != widget.url;
        });

        $dshBrd.saveWidgets();
      }

      $scope.toggleDraggable = function () {
        gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteEnabled = false;
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          $scope.lockIcon = 'img/_lockedRed.png';
        } else {
          $scope.lockIcon = 'img/_locked.png';
        }

        if (!gridOptions.draggable.enabled)
        $dshBrd.saveWidgets();
      }

      $scope.toggleDelete = function () {
        $scope.deleteEnabled = !$scope.deleteEnabled;
        $scope.urlsEnabled = !$scope.urlsEnabled;

        if ($scope.deleteEnabled) {
          $scope.deleteIcon = 'img/_xRed.png';
        } else {
          $scope.deleteIcon = 'img/_x.png';
        }

        if (gridOptions.draggable.enabled) {
          gridOptions.draggable.enabled = false;
          $scope.lockIcon = 'img/_locked.png';
        }
      }

      function getIcons() {
        apiData.getIcons()
        .success(function (icons) {
          $dshBrd.icons = icons;
        })
        .finally(function () {
          $dshBrd.allIcons = [];
          var len = $dshBrd.icons.length;

          for (i = 0; i < len; i++) {
            var iconObj = {};
            var iconString = 'img/ico/' + $dshBrd.icons[i];
            iconObj.path = iconString;
            $dshBrd.allIcons.push(iconObj);
          }
          $scope.shownIcons = [];
          $scope.loadSomeIcons();
        });
      }

      $scope.loadAllIcons = function () {
        var allIcons = [];
        var totalIcons = $dshBrd.allIcons.length - 1;
        $scope.areIconsLoaded = true;

        for (var i = 0; i <= totalIcons; i++) {
          var newIco = $dshBrd.allIcons[i]
          allIcons.push(newIco);
        }
        $scope.shownIcons = allIcons;
      }

      $scope.loadSomeIcons = function () {
        for (var i = 0; i <= 24; i++) {
          var newIco = $dshBrd.allIcons[i]
          $scope.shownIcons.push(newIco);
        }
      }

      $scope.gridsterModalOptions = gridsterModalOptions;
      $scope.selectedIcon = "img/_blank.png";

      $scope.selectIcon = function (iconPath) {
        $scope.selectedIcon = iconPath;
      }

      $scope.openMainModal = function (size, parentSelector) {
        gridOptions.draggable.enabled = false;
        $scope.deleteEnabled = false;

        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'mainModal.html',
          controller: 'dashboardCtrl',
          size: 'lg',
          appendTo: parentElem
        });
      };

      $scope.openAuthModal = function (size, parentSelector) {
        var parentElem = parentSelector ?
        angular.element($document[0].querySelector('.main-modal')) : undefined;

        var modalInstance = $uibModal.open({
          templateUrl: 'authModal.html',
          controller: 'authCtrl',
          controllerAs: '$auth',
          appendTo: parentElem,
        });
      };

      $scope.onLogout = function () {
        auth.logout();
        $location.path('dashboard.view');
      }

      $scope.syncWidgets = function () {
        $dshBrd.widgetsLg = $scope.widgets;
        $dshBrd.widgetsSm = $scope.widgets;
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      $scope.resetWidgets = function () {
        checkScreenSize();

        apiData.getDefaultGrid()
        .success(function (defaultGrid) {
          defaultGrid = angular.fromJson(defaultGrid);
          $scope.widgets = defaultGrid;
          if ($dshBrd.screenSize == 'lg') {
            $dshBrd.widgetsLg = defaultGrid;
          } else {
            $dshBrd.widgetsSm = defaultGrid;
          }
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function () {
          $dshBrd.saveWidgets();
          $location.path('dashboard.view');
        });
      }

      $scope.clearGrid = function () {
        $scope.widgets = [];
        if ($dshBrd.screenSize == 'lg') {
          $dshBrd.widgetsLg = [];
        } else {
          $dshBrd.widgetsSm = [];
        }
        $dshBrd.saveWidgets();
        $location.path('dashboard.view');
      }

      var resizeBreaks = {
        'sm' : 500
      };

      function inputScreenSize(width) {
        if (width > 500) {
          return 'lg';
        } else {
          return 'sm';
        }
      }

      angular.element($window).bind('resize', function () {
        var oldWidth = $dshBrd.currentWidth;
        var oldSize = $dshBrd.lastScreenSize;
        var newWidth = $window.outerWidth;
        var newSize = inputScreenSize(newWidth);

        if (oldSize !== newSize) {
          $location.path('dashboard.view');
        }

        $dshBrd.lastScreenSize = newSize;
      });
    };
  })();

(function () {

  angular
    .module('nerveCenter')
    .service('apiData', apiData);

  apiData.$inject = ['$http', 'auth'];
  function apiData($http, auth) {

    var getProfile = function () {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function (data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getIcons = function (data) {
      return $http.get('/api/ico', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var getDefaultGrid = function (data) {
      return $http.get('/api/defaultgrid', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets,
      getIcons: getIcons,
      getDefaultGrid: getDefaultGrid
    };

  }

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('clockWidget', clockWidget);

  function clockWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/clock-widget.template.html";
      }
    }
  };
})();


(function () {

  angular
    .module('nerveCenter')
    .directive('renderWidget', renderWidget);

  function renderWidget() {
    return {
      restrict: 'AEC',
      templateUrl: function (elem, attrs) {
        return "/dashboard/widgetTemplates/" + attrs.type +".template.html";
      }
    }
  };
})();

(function () {

  angular
  .module('nerveCenter')
  .directive('scrolly', scrolly);

  function scrolly($window) {
    return {
      restrict: 'AEC',
      link: function (scope, element, attrs) {
        var raw = element[0];

        element.bind('scroll', function () {
          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {
            scope.$apply(attrs.scrolly);
          }
        });
      }
    };
  };
});

(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function () {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


var calcGridOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [0, 0],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false
  }
};

(function () {

  angular
    .module('nerveCenter')
    .factory('ncCalcButtons', ncCalcButtons);

  function ncCalcButtons() {
    var factory = {};

    factory.digits = function () {
      var buttonKeys = [
        '7','8','9','.','+','-',
        '4','5','6','=','*','/',
        '1','2','3','0','<','c'
      ];

      var isSpecialKey = new RegExp("[c|<]");
      var isOperatorKey = new RegExp("([.|=|*|/|+|-])");
      var buttons = [];
      var len = buttonKeys.length - 1;
      var i;

      for (i = 0; i <= len; i++) {
        var keyObj = {};
        keyObj.key = buttonKeys[i];
        keyObj.col = Math.floor((i + 1) / 6);
        keyObj.row = i - (6 * keyObj.col);

        if (isSpecialKey.test(keyObj.key)) {
          keyObj.type = 'specialKey';
        } else if (isOperatorKey.test(keyObj.key)) {
          keyObj.type = 'operatorKey';
        } else {
          keyObj.type = 'digitKey';
        }

        buttons.push(keyObj);
      }

      return buttons;
    }
    return factory;
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .controller('ncCalcCtrl', ncCalcCtrl);

  function ncCalcCtrl($scope, $window, ncCalcButtons) {

    $scope.calcGridOptions = calcGridOptions;
    $scope.result = 0;
    $scope.out = '0';
    updateCalcKeyHeight();

    $scope.display = function (number) {

      if ($scope.out != 'undefined'
        && number != '='
        && number != 'c'
        && number != '<') {
        $scope.out = 
          $scope.out === '0' 
          ? number
          : $scope.out + number;
      }

      if ($scope.calcInput != '') {
        switch (number) {

          case 'c':
            //reset display
            $scope.out = '0';
            break;

          case '<':
            //backspace
            $scope.out = $scope.out.slice(0, -1);
            break;

          case '=':
            //calculate
            if ($scope.checksymbol($scope.out)) {
              $scope.out = eval($scope.out).toString();
            }
            break;

          default:
            break
        }
      }
    }

    $scope.checksymbol = function (number) {
      // check if string contains a restricted charater
      var notallow = ['+','-','/','*','.',''];
      if (notallow.indexOf(number.slice(-1))> -1 || notallow.indexOf(number.slice(0,1))>-1) {
        return false;
      }
      return true;
    }

    $scope.allCalcKeys = ncCalcButtons.digits();
    $scope.type = true;

    function updateCalcKeyHeight() {
      var divHeight = angular.element('#widget-icon').height()
      var calcRowHeight = divHeight / 4.25;
      var calcKeyFontHeight = divHeight / 10;
      var calcDisplayFontHeight = divHeight / 6;
      $scope.calcGridOptions.rowHeight = calcRowHeight;

      var calcDisplay = document.getElementsByClassName('calc-key');
      calcDisplay = angular.element(calcDisplay);
      calcDisplay.css('height', calcRowHeight);
      calcDisplay.css('font-size', calcKeyFontHeight);

      var calcDisplayFont = document.getElementsByClassName('display-inner');
      calcDisplayFont = angular.element(calcDisplayFont);
      calcDisplayFont.css('font-size', calcDisplayFontHeight);
    }

    angular.element($window).bind('resize', function ($scope) {
      setTimeout(updateCalcKeyHeight, 250);
    });

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('ncCalc', ncCalc);

  function ncCalc() {
    return {
      restrict: 'AEC',
      controller: 'ncCalcCtrl',
      templateUrl: '/dashboard/nc-calc/nc-calc.template.html'
    }
  }
})();


//# sourceMappingURL=app.min.js.map
